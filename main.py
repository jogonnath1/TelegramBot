import logging
from telegram import Update, ChatMember
from telegram.ext import Application, MessageHandler, CommandHandler, filters, CallbackContext

# üîπ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü‡ßá‡¶∞ API ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¨‡¶∏‡¶æ‡¶ì
TOKEN = "7958714981:AAGtL6gMzrvevBK2S8osBAcPVW-GqdWTNxs"

# üîπ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ID
GROUP_ID = -1002483552499

# üîπ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∏‡¶æ‡¶¨-‡¶ü‡¶™‡¶ø‡¶ï (Thread) ID ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü
TOPIC_IDS = {
    501: "üíª Task Announcement",
    694: "üì¢ Important Announcement",
}

# üîπ ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# üîπ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶¶‡ßá‡¶∞ ID ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßá‡¶ü
group_members = set()

async def fetch_group_members(context: CallbackContext) -> None:
    """‡¶¨‡¶ü ‡¶∞‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶π‡¶≤‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶¶‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡¶æ"""
    try:
        chat_admins = await context.bot.get_chat_administrators(GROUP_ID)
        for admin in chat_admins:
            group_members.add(admin.user.id)
        logging.info(f"‚úÖ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá: {len(group_members)} ‡¶ú‡¶®")
    except Exception as e:
        logging.warning(f"‚ùå ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")

async def forward_message(update: Update, context: CallbackContext) -> None:
    """‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶´‡¶∞‡ßã‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶¨‡ßá"""
    message = update.message
    if message and message.is_topic_message:
        topic_id = message.message_thread_id
        if topic_id in TOPIC_IDS:
            topic_title = TOPIC_IDS[topic_id]
            text = f"**{topic_title} ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ:**\n\n{message.text}"

            failed_users = []  # ‡¶Ø‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø, ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü

            for user_id in group_members:
                try:
                    await context.bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown")
                except Exception as e:
                    logging.warning(f"‚ùå {user_id} ‡¶ï‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø: {e}")
                    failed_users.append(f"[User](tg://user?id={user_id})")  # Mention ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶Ø‡ßã‡¶ó

            # ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßá‡¶â ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶®‡¶æ ‡¶™‡¶æ‡ßü, ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ `/start` ‡¶¶‡¶ø‡¶§‡ßá ‡¶¨‡¶≤‡¶æ ‡¶π‡¶¨‡ßá
            if failed_users:
                mention_list = ", ".join(failed_users)
                await context.bot.send_message(
                    chat_id=GROUP_ID,
                    text=f"‚ö†Ô∏è ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶∞‡¶æ ‡¶è‡¶ñ‡¶®‡¶ì `/start` ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø, ‡¶§‡¶æ‡¶á ‡¶§‡¶æ‡¶∞‡¶æ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡¶® ‡¶®‡¶æ! ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá `/start` ‡¶¶‡¶ø‡¶®:\n{mention_list}",
                    parse_mode="Markdown"
                )

async def start(update: Update, context: CallbackContext) -> None:
    """‡¶Ø‡¶ñ‡¶® ‡¶ï‡ßá‡¶â /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá, ‡¶§‡¶ñ‡¶® ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶¨‡ßá"""
    user = update.message.from_user
    group_members.add(user.id)
    await update.message.reply_text("‚úÖ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶® ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶æ‡¶á‡¶¨ ‡¶ï‡¶∞‡ßá‡¶õ‡ßã! üì¢ ‡¶∏‡¶ï‡¶≤ CP Announcements ‡¶™‡¶æ‡¶¨‡ßá‡•§")

async def member_update(update: Update, context: CallbackContext) -> None:
    """‡¶Ø‡¶ñ‡¶® ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßã‡¶ó ‡¶π‡¶¨‡ßá, ‡¶§‡¶ñ‡¶® ‡¶§‡¶æ‡¶ï‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá"""
    chat_member = update.chat_member
    if chat_member.new_chat_member.status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR]:
        group_members.add(chat_member.new_chat_member.user.id)

async def init_jobs(app: Application) -> None:
    """‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶≤‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶¨‡ßá"""
    await fetch_group_members(CallbackContext(app))

async def error_handler(update: object, context: CallbackContext) -> None:
    logging.error(f"‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {context.error}")

def main():
    """‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßá‡¶á‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®"""
    app = Application.builder().token(TOKEN).post_init(init_jobs).build()

    # ‚úÖ /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
    app.add_handler(CommandHandler("start", start))

    # ‚úÖ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶π‡¶≤‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶¨‡ßá
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, member_update))

    # ‚úÖ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶´‡¶∞‡ßã‡ßü‡¶æ‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, forward_message))

    # ‚úÖ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
    app.add_error_handler(error_handler)

    # ‚úÖ ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ
    app.run_polling()

if __name__ == "__main__":
    main()
